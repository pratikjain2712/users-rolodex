{"version":3,"sources":["components/search/Search.component.jsx","components/card/Card.component.jsx","components/card-list/CardList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","placeholder","handleChange","type","onChange","Card","details","className","src","name","alt","email","CardList","data","map","user","key","id","App","e","setState","searchKey","target","value","state","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAGaA,G,YAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAAmC,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCArGG,G,YAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BF,EAAQG,KAAlC,0BAAgEC,IAAI,YAC5E,4BAAKJ,EAAQG,MACb,2BAAIH,EAAQK,UCJLC,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,yBAAKN,UAAU,YACZM,EAAKC,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIX,QAASS,SC8BtBG,E,YAhCb,aAAe,IAAD,8BACZ,+CAaFhB,aAAe,SAAAiB,GACb,EAAKC,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXH,UAAW,GACXR,KAAM,IAJI,E,iFAQO,IAAD,OAElBY,MADY,8CAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GAAI,OAAI,EAAKO,SAAS,CAAEP,c,+BAMxB,IAAD,EACqBgB,KAAKL,MAAzBX,EADD,EACCA,KAAMQ,EADP,EACOA,UACRS,EAAgBjB,EAAKkB,QAAO,SAAAhB,GAAI,OAAIA,EAAKN,KAAKuB,cAAcC,SAASZ,EAAUW,kBAErF,OACE,yBAAKzB,UAAU,OACb,oDACA,kBAAC,EAAD,CAAQN,YAAa,cAAeC,aAAc2B,KAAK3B,eACvD,kBAAC,EAAD,CAAUW,KAAMiB,S,GA3BNI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.d57745b3.chunk.js","sourcesContent":["import React from 'react';\nimport './Search.style.css';\n\nexport const Search = ({ placeholder, handleChange }) => <input type=\"search\" placeholder={placeholder} onChange={handleChange} />;\n","import React from 'react';\nimport './Card.style.css';\n\nexport const Card = ({ details }) => {\n  return (\n    <div className=\"Card\">\n      <img src={`https://robohash.org/${details.name}?set=set5&size=180x180`} alt=\"details\" />\n      <h2>{details.name}</h2>\n      <p>{details.email}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CardList.style.css';\nimport { Card } from '../card/Card.component';\n\nexport const CardList = ({ data }) => {\n  return (\n    <div className=\"CardList\">\n      {data.map(user => (\n        <Card key={user.id} details={user}></Card>\n      ))}\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Search } from './components/search/Search.component';\nimport { CardList } from './components/card-list/CardList.component';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchKey: '',\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    const url = 'https://jsonplaceholder.typicode.com/users';\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n  }\n  handleChange = e => {\n    this.setState({ searchKey: e.target.value });\n  };\n\n  render() {\n    const { data, searchKey } = this.state;\n    const filteredUsers = data.filter(user => user.name.toLowerCase().includes(searchKey.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Search Users By Name</h1>\n        <Search placeholder={'Search User'} handleChange={this.handleChange}></Search>\n        <CardList data={filteredUsers}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}